---
title: "PCA Analysis"
format: html
editor: visual
---


# Data importation and exploration
```{r}
#Loading necessary packages

library(tidyverse)
library(here)
library(readr)
```

```{r}
#Importing data set

data <- read.csv("ahds.csv",stringsAsFactors = TRUE )
```

```{r}
glimpse(data)
```

```{r}
head(data)
```

```{r}
#Shape of data

summary(data)
```

```{r}
library(skimr)

skim(data)
```

```{r}
library(gtsummary)

data %>% 
    select(PID, Order) %>% 
    skim()
```

# Splitting the data into training and testing sets

```{r}
library(rsample)
set.seed(123)

split <- initial_split(data, prop = 0.7, 
                       strata = "SalePrice")

data_train  <- training(split)
data_test   <- testing(split)


glimpse(data_train)
```




# Checking for distribution and outliers using plots

```{r}

#Plotting the distribution of Saleprice
data_train %>% 
    ggplot(aes(x= SalePrice)) + geom_histogram(fill = "lightblue", colour = "white", bins=30)
```


```{r}
#Plotting distribution of Lot Area

data_train %>% 
    ggplot(aes(y= Lot.Area)) + geom_boxplot(fill = '#006EA1', color = 'black') +
  labs(title = 'Lot size in square feet before transformation',
       y = 'Lot size',
    ) 

```

```{r}

#Plotting distribution of Basement Area

library(tidyverse)

data_train %>% 
    ggplot(aes(y= Total.Bsmt.SF)) + geom_boxplot(fill = '#006EA1', color = 'black') +
  labs(title = 'Total square feet of Basement area before tranformation',
       y = 'Total square Feet',
    )
```

```{r}
#Plotting Distribution of Garage size

library(tidyverse)

data_train %>% 
    ggplot(aes(y= Garage.Area)) + geom_boxplot(fill = '#006EA1', color = 'black') +
  labs(title = 'Size of Garage in square feet before transformation',
       y = 'Garage square Feet',
    )
```

# Outlier fix for selected variables using IQR

```{r}

#Getting the interquantile ranges

Q1Garage <- quantile(data_train$Garage.Area, .25)
Q1Lot <- quantile(data_train$Lot.Area, .25)
Q1Basement <- quantile(data_train$Total.Bsmt.SF, .25, na.rm = TRUE)
Q3Garage <- quantile(data_train$Garage.Area, .75)
Q3Lot <- quantile(data_train$Lot.Area, .75)
Q3Basement <- quantile(data_train$Total.Bsmt.SF, .75, na.rm = TRUE)
IQRGarage <- IQR(data_train$Garage.Area)
IQRBasement <- IQR(data_train$Lot.Area)
IQRLot <- IQR(data_train$Total.Bsmt.SF, na.rm = TRUE)

Q1Basement - 1.5*IQRBasement

Q3Basement + 1.5*IQRBasement
```



```{r}

#Creating a subset without outliers 

noutlier <- data_train %>% 
    filter(Garage.Area < (Q3Garage + 1.5*IQRGarage) & Garage.Area > (Q1Garage - 1.5*IQRGarage) & Total.Bsmt.SF < (Q3Basement + 1.5*IQRBasement) & Total.Bsmt.SF > (Q1Basement - 1.5*IQRBasement) & Lot.Area < (Q3Lot + 1.5*IQRLot) & Lot.Area > (Q1Lot - 1.5*IQRLot))

noutlier
```
```{r}
#Plotting Lot Area without outliers

noutlier %>% 
    ggplot(aes(y= Lot.Area)) + geom_boxplot(fill = '#006EA1', color = 'black') +
  labs(title = 'Lot size in square feet after removing outliers ',
       y = 'Lot size',
    ) 
```

```{r}
#Plotting Garage size without outliers

noutlier %>% 
    ggplot(aes(y= Garage.Area)) + geom_boxplot(fill = '#006EA1', color = 'black') +
  labs(title = 'Garage size in square feet after removing outliers ',
       y = 'Garage size',
    )
```



```{r}
#Plotting Basement size without outliers

noutlier %>% 
    ggplot(aes(y= Total.Bsmt.SF)) + geom_boxplot(fill = '#006EA1', color = 'black') +
  labs(title = 'Basement size in square feet after removing outliers ',
       y = 'Basement size',
    )
```

# Creating a recipe to be used with feature and target engineering

```{r}
# Feature engineering packages
library(caret)    # for various ML tasks
library(recipes)  # for feature engineering tasks

data_recipe <- recipe(SalePrice ~ ., data = data_train, na.omit(data_train), scale=TRUE )
summary(data_recipe)

```

# Updating Variable roles

```{r}
data_recipe <- data_recipe %>% 
               update_role(PID, new_role = "id variable")

summary(data_recipe)
```

```{r}
data_recipe <- data_recipe %>% 
               update_role(Order, new_role = "id variable")

summary(data_recipe)
```


# Visualizing missing values

```{r}
#missing value summary

library(naniar)

data_train %>% 
    miss_var_summary()
```

```{r}

#Visualizing missingness
data_train %>% 
    is.na() %>%
    reshape2::melt() %>%
    ggplot(aes(Var2, Var1, fill=value)) + 
    geom_tile() + 
    coord_flip() +
    scale_y_continuous(NULL, expand = c(0, 0)) +
    scale_fill_grey(name = "", 
                    labels = c("Present", 
                               "Missing")) +
    xlab("Observation") +
    theme(axis.text.y  = element_text(size = 4))
```


# Numerical values imputation

```{r}
#Fence type 

datanew <- data_recipe %>% 
    step_impute_knn(Fireplace.Qu, Lot.Frontage, Fence, neighbors = 6 ) %>%
    prep() %>% 
    bake(new_data = data_train) 

datanew    
```


```{r}
datanew %>% 
    select(Fireplace.Qu, Lot.Frontage, Fence) %>% 
    summary()
```
# Calculating skewness

```{r}

library(summarytools)
summarytools::descr(datanew)

```

```{r}

#Plotting highly skewed variables

datanew %>% 
    ggplot(aes(x= Gr.Liv.Area)) + geom_histogram(fill = "lightblue", colour = "white", bins=30)
```

```{r}

#Plotting highly skewed variables

datanew %>% 
    ggplot(aes(x= Mas.Vnr.Area)) + geom_histogram(fill = "lightblue", colour = "white", bins=30)
```

# Transforming highly skewed variables

```{r}
data_recipe %>% 
    step_YeoJohnson(Mas.Vnr.Area) %>% 
    prep() %>% 
    bake(new_data = data_train) %>% 

    ggplot(mapping = aes(x = Mas.Vnr.Area)) + geom_histogram(fill = '#006EA1', color = 'white', bins = 15) +
  labs(title = 'Total Masonry veneer area after tranformation',
       x = 'Total Area',
    )
```


```{r}
data_recipe %>% 
    step_YeoJohnson(Gr.Liv.Area) %>% 
    prep() %>% 
    bake(new_data = data_train) %>% 

    ggplot(mapping = aes(x = Gr.Liv.Area)) + geom_histogram(fill = '#006EA1', color = 'white', bins = 15) +
  labs(title = 'Total Garage area after tranformation',
       x = 'Total Area',
    )
```


# Transforming categorical variables

```{r}
count(datanew, Roof.Matl) %>% 
    arrange(n)
```

```{r}

#Label encoding

data_recipe %>%
    step_integer(Roof.Matl) %>%
    prep(data_train) %>%
    bake(data_train) %>%
    count(Roof.Matl)
```

```{r}
count(datanew, Neighborhood) %>% 
    arrange(n)
```

```{r}
#Lumping

data_recipe %>%
    step_other(Neighborhood, threshold = 0.01, 
             other = "other") %>%
    prep(data_train) %>%
    bake(data_train) %>%
    count(Neighborhood) %>% 
    arrange(n)
```
# One hot encoding

```{r}
onehot <- data_recipe %>%
    step_dummy(Garage.Type, one_hot = TRUE) %>%
    prep(data_train) %>%
    bake(data_train)

```

```{r}
onehot %>% 
    select(Garage.Type_Attchd,Garage.Type_X2Types,Garage.Type_Basment,Garage.Type_BuiltIn,Garage.Type_CarPort,Garage.Type_Detchd) %>% 
    summary()

```
#Bivariate analysis

```{r}
data_train %>% 
    select(SalePrice, MS.Zoning, Foundation, Garage.Type) %>%
    ggplot(aes(x= Foundation, y= SalePrice )) + geom_boxplot(fill = "green") + 
    scale_y_continuous(trans = "log10")
   
```


# Dimension reduction

```{r}
PCA <- data_recipe %>%
    step_impute_knn(all_numeric()) %>% 
    step_center(all_numeric_predictors()) %>%
    step_scale(all_numeric_predictors()) %>%
    step_pca(all_numeric_predictors() ,id ="pca" ) %>% 
    prep(data_train) %>%
    bake(data_train)


PCA

```
# Plotting relationships of PCA with SalesPrice
```{r}
PCA %>% 
    select(PC1,PC2,SalePrice) %>% 
    ggplot(aes(x = PC1,y = SalePrice)) +geom_point()
```
```{r}
PCA %>% 
    select(PC1,PC2,SalePrice) %>% 
    ggplot(aes(x = PC2,y = SalePrice)) +geom_point()
```

